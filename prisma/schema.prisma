// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @default(cuid()) @id
  name            String?
  image           String?
  handle          String?   @unique
  email           String?   @unique
  emailVerified   DateTime? 
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  reviews         Review[]
  accounts        Account[]
  sessions        Session[]

  @@map(name: "users")
}

model Review {
  id                  String       @default(cuid()) @id
  content             String?
  author              User      @relation(fields: [authorId], references: [id])
  authorId            String
  algorithms          Int @default(0)
  company             String?
  jobType             String?
  jobTitle            String?
  languages           String?
  liveCoding          Int @default(0)
  officePolicy        String?
  salaryRangeLow      Float?
  salaryRangeHigh     Float?
  systemDesign        Int @default(0)
  takeHome            Int @default(0)
  hired               String?
  votes               Int       @default(0)
  roundsOfInterviews  Int?
  technicalDifficulty Int?
}

model Account {
  id                 String  @id @default(cuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  providerId         String    @map(name: "provider_id")
  providerType       String    @map(name: "provider_type")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  refresh_token      String?
  accessToken        String?   @map(name: "access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}